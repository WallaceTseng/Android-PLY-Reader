/*
 * Code to build a cube. Lots of help here from
 * http://bit.ly/1QPBhqK
*/
package com.graphics.openglgui;

import android.opengl.GLES20;
import android.util.Log;
import java.nio.FloatBuffer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class Cube {
  private FloatBuffer vertexBuffer;
  private FloatBuffer colorBuffer;
  private int mMVPMatrixHandle;
  private int mPositionHandle;
  private int mColorHandle;
  private int[] buffers;
  // number of coordinates per vertex in this array
  static final int COORDS_PER_VERTEX = 3;
  static float cubeCoords[] = {
    -0.5f,-0.5f, 0.5f,
    +0.5f,-0.5f, 0.5f,
    -0.5f,+0.5f, 0.5f,
    -0.5f,+0.5f, 0.5f,
    +0.5f,-0.5f, 0.5f,
    +0.5f,+0.5f, 0.5f,
    //  Back
    +0.5f,-0.5f,-0.5f,
    -0.5f,-0.5f,-0.5f,
    +0.5f,+0.5f,-0.5f,
    +0.5f,+0.5f,-0.5f,
    -0.5f,-0.5f,-0.5f,
    -0.5f,+0.5f,-0.5f,
    //  Right
    +0.5f,-0.5f,+0.5f,
    +0.5f,-0.5f,-0.5f,
    +0.5f,+0.5f,+0.5f,
    +0.5f,+0.5f,+0.5f,
    +0.5f,-0.5f,-0.5f,
    +0.5f,+0.5f,-0.5f,
    //  Left
    -0.5f,-0.5f,-0.5f,
    -0.5f,-0.5f,+0.5f,
    -0.5f,+0.5f,-0.5f,
    -0.5f,+0.5f,-0.5f,
    -0.5f,-0.5f,+0.5f,
    -0.5f,+0.5f,+0.5f,
    //  Top
    -0.5f,+0.5f,+0.5f,
    +0.5f,+0.5f,+0.5f,
    -0.5f,+0.5f,-0.5f,
    -0.5f,+0.5f,-0.5f,
    +0.5f,+0.5f,+0.5f,
    +0.5f,+0.5f,-0.5f,
    //  Bottom
    -0.5f,-0.5f,-0.5f,
    +0.5f,-0.5f,-0.5f,
    -0.5f,-0.5f,+0.5f,
    -0.5f,-0.5f,+0.5f,
    +0.5f,-0.5f,-0.5f,
    +0.5f,-0.5f,+0.5f,
  };

  static float cubeColors[] = {
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    0,0,1,1,
    0,0,1,1,
    0,0,1,1,
    0,0,1,1,
    0,0,1,1,
    0,0,1,1,

    1,1,0,1,
    1,1,0,1,
    1,1,0,1,
    1,1,0,1,
    1,1,0,1,
    1,1,0,1,

    0,1,0,1,
    0,1,0,1,
    0,1,0,1,
    0,1,0,1,
    0,1,0,1,
    0,1,0,1,

    0,1,1,1,
    0,1,1,1,
    0,1,1,1,
    0,1,1,1,
    0,1,1,1,
    0,1,1,1,

    1,0,1,1,
    1,0,1,1,
    1,0,1,1,
    1,0,1,1,
    1,0,1,1,
    1,0,1,1,
  };

  public int loadShader(int type, String shaderCode) {
    // create a vertex shader type (GLES20.GL_VERTEX_SHADER)
    // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)
    int shader = GLES20.glCreateShader(type);
    // add the source code to the shader and compile it
    GLES20.glShaderSource(shader, shaderCode);
    GLES20.glCompileShader(shader);
    return shader;
  }

  private final String vertexShaderCode =
      // This matrix member variable provides a hook to manipulate
      // the coordinates of the objects that use this vertex shader
      "uniform mat4 uMVPMatrix;" +
      "attribute vec4 vPosition;" +
      "void main() {" +
      // the matrix must be included as a modifier of gl_Position
      // Note that the uMVPMatrix factor *must be first* in order
      // for the matrix multiplication product to be correct.
      "  gl_Position = uMVPMatrix * vPosition;" +
      "}";

  private final String fragmentShaderCode =
      "precision mediump float;" +
      "attribute vec4 vColor;" +
      "void main() {" +
      "  gl_FragColor = vColor;" +
      "}";

  private final int mProgram;

  // Riffed off of the Android OpenGL ES 2.0 How-to page
  // http://bit.ly/1KVYlAx
  public Cube() {
    buffers = new int[3];
    vertexBuffer = ByteBuffer.allocateDirect(cubeCoords.length * 4)
                   .order(ByteOrder.nativeOrder())
                   .asFloatBuffer();
    vertexBuffer.put(cubeCoords).position(0);
    Log.v("Cube Init", "I'm a warning!");
    Log.v("Cube Init", "Coord Buffer capacity: " + vertexBuffer.capacity());

     GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[0]);
     Log.v("Cube Init", "I'm a warning! 2");
     GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER,
                         vertexBuffer.capacity(),
                         vertexBuffer,
                         GLES20.GL_STATIC_DRAW);
     Log.v("Cube Init", "I'm a warning! 3");
     GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, 0);
    Log.v("Cube Init", "Position bound");
    colorBuffer = ByteBuffer.allocateDirect(cubeColors.length * 4)
                  .order(ByteOrder.nativeOrder())
                  .asFloatBuffer();
    colorBuffer.put(cubeColors).position(0);
    Log.v("Cube Init", "Color Buffer capacity: " + colorBuffer.capacity());
     GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[1]);
     GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER,
                         colorBuffer.capacity(),
                         colorBuffer,
                         GLES20.GL_STATIC_DRAW);
     GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, 0);
    Log.v("Cube Init", "Color bound");

    // Get our shaders ready
    int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER,
                                  vertexShaderCode);
    int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER,
                                    fragmentShaderCode);
    mProgram = GLES20.glCreateProgram();
    // add the vertex shader to program
    GLES20.glAttachShader(mProgram, vertexShader);
    // add the fragment shader to program
    GLES20.glAttachShader(mProgram, fragmentShader);
    // creates OpenGL ES program executables
    GLES20.glBindAttribLocation(mProgram, 0, "vPosition");
    GLES20.glBindAttribLocation(mProgram, 1, "vColor");
    GLES20.glLinkProgram(mProgram);
  }

  private final int vertexCount = 36;
  public void draw(float[] mvpMatrix) {
    // Add program to OpenGL ES environment
    GLES20.glUseProgram(mProgram);
    // Position Buffer, passed into shader
    // GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[0]);
    mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");
    GLES20.glEnableVertexAttribArray(mPositionHandle);
    GLES20.glVertexAttribPointer(mPositionHandle, 3,
                                 GLES20.GL_FLOAT, false,
                                 0, vertexBuffer);
    // Color Buffer, passed into shader
    // GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[1]);
    Log.v("Draw", "we're doing things!");
    mColorHandle = GLES20.glGetAttribLocation(mProgram, "vColor");
    GLES20.glEnableVertexAttribArray(mColorHandle);
    GLES20.glVertexAttribPointer(mColorHandle, 4,
                                 GLES20.GL_FLOAT, false,
                                 0, colorBuffer);
    // get handle to shape's transformation matrix
    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
    // Pass the projection and view transformation to the shader
    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);
    // Draw the triangle
    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);
    // Disable vertex array
    GLES20.glDisableVertexAttribArray(mPositionHandle);
    GLES20.glDisableVertexAttribArray(mColorHandle);
    GLES20.glFlush();
  }
}
